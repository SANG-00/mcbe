#!/usr/bin/perl -s 

$codes = { LD => 2, ST => 3, ADD => 4, SUB => 5, 
	JMP => 6, JZ => 7, HLT => 1, NOP => 0 };
$labels = {IN => 30, OUT => 31};
our @MEM = ();
our $IR = 0;
our $PC = 0;
our $A = 0;

#------------------------------------
sub dec2bin {
	($fld, $num) = @_;   
    my $str = unpack("B32", pack("N", $num));
    return substr($str,-$fld);
}

sub addr2dec {
	$num = shift;
	$str = substr("0" x 32 . $num, -32);
    my $u = unpack("N", pack("B32", $str));
    return $u;
}

sub bin2dec {
	$num = shift;
	my $n = unpack("N", pack("B32", substr("0" x 32 . $num, -32)));
	if(substr($num,0,1) eq "1") {
		$n -= (length($num) == 8) ? 256 : 32;
	}
	return $n;
}

#------------------------------------



sub insttobin {
	my ($mnem, $arg) = @_;
	
	$binst = dec2bin(3,$codes->{$mnem});
	$bdat  = dec2bin(5,$arg);
	return $binst.$bdat;
}

sub setlabel 	{ $x = shift; $labels->{$x} = $lnum; }
sub numarg 	{ ($inst,$arg) = @_; 	return ['NUMARG',	$lnum++,	$inst,	$arg,	""]; }
sub noarg 	{ $inst = shift; 	return ['NONARG', 	$lnum++,	$inst,	"",	""]; }
sub lblarg 	{ ($inst,$lbl) = @_; 	return ['LBLARG', 	$lnum++, 	$inst, 	$lbl,	""]; }
sub data 	{ $data = shift; 	return ['DATA', 	$lnum++, 	"", 	$data,	""]; }

# lee programa en ensamblador
sub readprog {
	my @l = ();
	while(<>) {
		/^([A-Z]+[0-9]*):/ and setlabel($1);
		/^ *\t*([A-Z]+) *$/ and push @l, noarg($1);
		/^ *\t*([A-Z]+) +(-*[0-9]+)/ and push @l, numarg($1,$2);
		/^ *\t*([A-Z]+) +([A-Z]+[0-9]*)/ and push @l, lblarg($1,$2);
		/^ *\t*(-*\d+)/ and push @l, data($1);
		/^[A-Z]+[0-9]*: *\t*+([A-Z]+) *$/ and push @l, noarg($1);
		/^[A-Z]+[0-9]*: *\t*+([A-Z]+) +(-*[0-9]+)/ and push @l, numarg($1,$2);
		/^[A-Z]+[0-9]*: *\t*+([A-Z]+) +([A-Z]+[0-9]*)/ and push @l, lblarg($1,$2);
		/^[A-Z]+[0-9]*: *\t*(-*\d+)/ and push @l, data($1);
	}
	#close INFILE;
	return @l;
}

sub makeasm {
	my @lineslist = @_;
	foreach my $l (@lineslist) {
		my ($type, $nl, $inst, $arg, $bin) = @{$l};
		if($type eq "LBLARG") {
			#print "LBLARG\n";
			$arg = $labels->{$arg};
			if($inst =~ /JMP|JZ/) {
				$arg -= $nl;
			}
			$bin = insttobin($inst,$arg);
		} 
		if($type eq "NUMARG") {
			#print "MAKEASM ARG=$arg\n";
			$bin = insttobin($inst,$arg);
		}
		if($type eq "NONARG") {
			$bin = insttobin($inst,0);
		}
		if($type eq "DATA") {
			$bin = dec2bin(8,$arg);
		}
		#print "MAKEASM $type $nl $inst $arg $bin\n";
		
		push @l, [$nl,$inst,$arg,$bin];
	}
	return @l;
}


sub printline {
	my @lista = @_;
	my ($nl, $inst, $arg, $bin) = @lista;
	if(defined $v) {
		if($inst =~ /JMP|JZ/) {
			return sprintf("%2d %4s %+3d %s\n", $nl,$inst,$arg,$bin);
		} else {
			return sprintf("%2d %4s %3d %s\n", $nl,$inst,$arg,$bin);
		}
	} else {
		if($inst =~ /JMP|JZ/) {
			return sprintf("%2d %s\n", $nl,$bin);
		} else {
			return sprintf("%2d %s\n", $nl,$bin);
		}
	}
}
	

sub printasm {
	my @prog = @_;
	foreach my $line (@prog) {
		my @l = @{$line};
		print printline(@l);
	}
}

sub bin2mem {
	my @lines = @_;
	my $nl = 0;
	foreach my $line(@lines) {
		@MEM[$nl++] = $line;
		use Data::Dumper; print Dumper(@MEM);
	}
}
	
sub asm2mem {
	my @prog = @_;
	foreach my $line(@prog) {
		my ($nl, $inst, $arg, $bin) = @{$line};
		@MEM[$nl] = $bin;
	}
}
	
sub asm2bytes {
	my @prog = @_;
	my $s;
	foreach my $line(@prog) {
		my ($nl, $inst, $arg, $bin) = @{$line};
		$s .= pack "c*", bin2dec($bin);
	}
	return $s;
}
	

sub execute {
	$my_IR = shift;
	$my_IR =~ /(\d\d\d)(\d\d\d\d\d)/;
	$inst = $1;
	$data = $2;

	my $halt = 0;

	if($inst eq '010') { #LD
		$addr = addr2dec($data);
		if($addr == 30) {
			printf "Ingrese un dato: ";
			$dato = <STDIN>;
			@MEM[$addr] = dec2bin(8,$dato);
		} 
		$A = $MEM[$addr];
		$PC++;

	}
	if($inst eq '011') { #ST
		$addr = addr2dec($data);
		#printf "A = %s dec2bin = %s \n",$A, dec2bin(8,$A);
		$MEM[$addr] = dec2bin(8,bin2dec($A));
		$PC++;
		if($addr eq 31) {
			printf "SALIDA: %s\n",bin2dec($MEM[$addr]);
			#$nada = <STDIN>;
		}
	}
	if($inst eq '100') { #ADD
		$addr = addr2dec($data);
		$m = bin2dec($MEM[$addr]);
		$A = dec2bin(8,bin2dec($A) + $m);
		$PC++;
	}
	if($inst eq '101') { #SUB
		$addr = addr2dec($data);
		my $m = bin2dec($MEM[$addr]);
		$A = dec2bin(8,bin2dec($A) - $m);
		$PC++;
	}
	if($inst eq '001') { #HLT
		$halt = 1;
	}
	if($inst eq '000') { #NOP
		$PC++;
	}
	if($inst eq '110') { #JMP
		$offset = bin2dec($data);
		#print "JMP OFFSET $offset\n";
		$PC += $offset;
	}
	if($inst eq '111') { #JZ
		if(bin2dec($A) == 0) {
			$offset = bin2dec($data);
		#print "JZ OFFSET $offset\n";
			$PC += $offset;
		} else {
			$PC++;
		}
	}
	return $halt;
}

# direcciones bajas abajo
#sub printstatus {
#	print "------------------------------------------------------------\n";
#	print "PC:$PC              IR:$IR            A:$A\n";
#	print "------------------------------------------------------------\n";
#	foreach $j (0..7) {
#		foreach $i (7, 15, 23, 31) {
#			$k = $i - $j;
#			printf "%3d %8s\t",$k,$MEM[$k];
#		}
#		print "\n";
#	}
#	print "------------------------------------------------------------\n";
#	$nada = <STDIN>;
#}
	
sub printstatus {
	print "------------------------------------------------------------\n";
	print "PC:$PC              IR:$IR            A:$A\n";
	print "------------------------------------------------------------\n";
	foreach $j (0..7) {
		foreach $i (0, 8, 16, 24) {
			$k = $i + $j;
			printf "%3d %8s\t",$k,$MEM[$k];
		}
		print "\n";
	}
	print "------------------------------------------------------------\n";
	$nada = <STDIN>;
}
	
	
sub assemble {
	my @list = @_;
	my @p = makeasm(@list);

	asm2mem(@p);
	return @p;
}

# Ciclo de instruccion
sub run {
	my @prog = @_;

	my $halt = 0;
	while($halt == 0) {
		die "El PC sali√≥ de la memoria: $PC" if($PC < 0 || $PC > 31);
		@p = @{$prog[$PC]};
		print printline(@p) if(defined $v);
		$nada = <STDIN> if(defined $v);
		$IR = $MEM[$PC];
		$halt = execute($IR);
		printstatus if (defined $v);
	}

	print "Programa Terminado\n";
}

#----------------------------------

sub hints {
	my $msg = "mcbeas [opciones] $ARGV[0] fuente.asm | -\n";
	$msg .= "\t-h\tAyuda\n";
	$msg .= "\t-a\tEnsamblar\n";
	$msg .= "\t-i\tInterpretar\n";
	$msg .= "\t-v\tVerboso\n";
	$msg .= "\t-g\tGenerar binario\n";
	die $msg;
}

if(scalar(@ARGV) == 0) {
	hints();
} 

my (@lines, @prog);

@lines = readprog;
@prog = assemble(@lines);

if(defined $a) {
	printasm(@prog);
} elsif(defined $i) {
	run(@prog);
} elsif(defined $g) {
	print asm2bytes(@prog);
} elsif(defined $h) {
	hints();
} else {
	hints();
}

