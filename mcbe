#!/usr/bin/perl -s

our @MEM = ();
our $IR = 0;
our $PC = 0;
our $AC = 0;


sub dec2bin {
	($fld, $num) = @_;   
	my $str = unpack("B32", pack("N", $num));
	return substr($str,-$fld);
}

sub addr2dec {
	$num = shift;
	$str = substr("0" x 32 . $num, -32);
	my $u = unpack("N", pack("B32", $str));
	return $u;
}

sub bin2dec {
	$num = shift;
	my $n = unpack("N", pack("B32", substr("0" x 32 . $num, -32)));
	if(substr($num,0,1) eq "1") {
		$n -= (length($num) == 8) ? 256 : 32;
	}
	return $n;
}

# lee programa en codigo maquina
sub readbytes {
	my @l = ();
	#print "ARGV0 = ".$ARGV[0]."\n";
	open (my $INFILE, "$ARGV[0]") or die "Falta nombre de archivo";
	binmode($INFILE);
	while(read ($INFILE, my $byte, 1)) {
		push @l, $byte;
	}
	close $INFILE;
	#use Data::Dumper; print Dumper(@l);
	return @l;
}

sub printline {
	my @lista = @_;
	my ($nl, $inst, $arg, $bin) = @lista;
	if($inst =~ /JMP|JZ/) {
		return sprintf("%2d %4s %+3d %s\n", $nl,$inst,$arg,$bin);
	} else {
		return sprintf("%2d %4s %3d %s\n", $nl,$inst,$arg,$bin);
	}
}

sub printasm {
	my @prog = @_;
	foreach my $line (@prog) {
		my @l = @{$line};
		print printline(@l);
	}
}

sub bin2mem {
	my @lines = @_;
	my $nl = 0;
	foreach my $line(@lines) {
		@MEM[$nl++] = $line;
		#use Data::Dumper; print Dumper(@MEM);
	}
}
	
sub asm2bytes {
	my @prog = @_;
	my $s;
	foreach my $line(@prog) {
		my ($nl, $inst, $arg, $bin) = @{$line};
		$s .= pack "c*", bin2dec($bin);
	}
	return $s;
}

sub execute {
	$my_IR = shift;
	$my_IR =~ /(\d\d\d)(\d\d\d\d\d)/;
	$inst = $1;
	$data = $2;

	my $halt = 0;

	if($inst eq '010') { #LD
		$addr = addr2dec($data);
		if($addr == 30) {
			#printf "Ingrese un dato: ";
			$dato = <STDIN>;
			@MEM[$addr] = dec2bin(8,$dato);
		} 
		$AC = @MEM[$addr];
		$PC++;

	}
	if($inst eq '011') { #ST
		$addr = addr2dec($data);
		#printf "A = %s dec2bin = %s \n",$AC, dec2bin(8,$AC);
		@MEM[$addr] = dec2bin(8,bin2dec($AC));
		$PC++;
		if($addr eq 31) {
			if(defined $A) {
				printf "%s\n",chr(bin2dec(@MEM[$addr]));
			} elsif(defined $B) {
				printf "%s\n",@MEM[$addr];
			} elsif(defined $H) {
				printf "%X\n",bin2dec(@MEM[$addr]);
			} else {
				printf "%d\n",bin2dec(@MEM[$addr]);
			}
			#$nada = <STDIN>;
		}
	}
	if($inst eq '100') { #ADD
		$addr = addr2dec($data);
		$m = bin2dec(@MEM[$addr]);
		$AC = dec2bin(8,bin2dec($AC) + $m);
		$PC++;
	}
	if($inst eq '101') { #SUB
		$addr = addr2dec($data);
		my $m = bin2dec(@MEM[$addr]);
		$AC = dec2bin(8,bin2dec($AC) - $m);
		$PC++;
	}
	if($inst eq '001') { #HLT
		$halt = 1;
	}
	if($inst eq '000') { #NOP
		$PC++;
	}
	if($inst eq '110') { #JMP
		$offset = bin2dec($data);
		#print "JMP OFFSET $offset\n";
		$PC += $offset;
	}
	if($inst eq '111') { #JZ
		if(bin2dec($AC) == 0) {
			$offset = bin2dec($data);
		#print "JZ OFFSET $offset\n";
			$PC += $offset;
		} else {
			$PC++;
		}
	}
	return $halt;
}

# direcciones bajas abajo:
#sub printstatus {
#	foreach $j (0..7) {
#		foreach $i (7, 15, 23, 31) {
#			$k = $i - $j;
sub printstatus {
	print "------------------------------------------------------------\n";
	print "PC:$PC              IR:$IR            A:$AC\n";
	print "------------------------------------------------------------\n";
	foreach $j (0..7) {
		foreach $i (0, 8, 16, 24) {
			$k = $i + $j;
			printf "%3d %8s\t",$k,$MEM[$k];
		}
		print "\n";
	}
	print "------------------------------------------------------------\n";
	$nada = <STDIN>;
}
	
	
# Ciclo de instruccion
sub run {
	my @prog = @_;

	my $halt = 0;
	while($halt == 0) {
		die "El PC sali√≥ de la memoria: $PC" if($PC < 0 || $PC > 31);
		@p = @{@prog[$PC]};
		print printline(@p) if(defined $v);
		$nada = <STDIN> if(defined $v);
		$IR = @MEM[$PC];
		$halt = execute($IR);
		printstatus if(defined $v);
	}
	#print "Programa Terminado\n";
}

sub bytes2bin {
	my @bytes = @_;
	
	my @bins = ();
	foreach my $byte (@bytes) {
    		my $b = unpack("B8", $byte);
	#use Data::Dumper; print Dumper($b);
		push @bins, $b;
	}
	return @bins;
}

sub hints {
	my $msg = "mcbe [opciones] $ARGV[0] programa | -\n";
# UNDOCUMENTED
#	$msg .= "\t-v\tVerboso\n";
	$msg .= "\t-A\tSalida en ASCII\n";
	$msg .= "\t-B\tSalida en binario\n";
	$msg .= "\t-H\tSalida en hexadecimal\n";
	die $msg;
}

#----------------------------------

if(scalar(@ARGV) == 0) {
	hints();
} 

my @lines, @prog, @bins;

@bytes = readbytes;
@bins = bytes2bin(@bytes);
bin2mem(@bins);
run(@prog);

